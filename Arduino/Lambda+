// Code for Lambda Plus (Gravitech) and LCD 16x2 Keypad Shield

#include <Wire.h>
#include <SPI.h>
#include <SparkFunLSM9DS1.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <LiquidCrystal.h>
#include <HTS221.h>

LSM9DS1 imu;
#define LSM9DS1_M  0x1C // Would be 0x1C if SDO_M is LOW
#define LSM9DS1_AG  0x6A // Would be 0x6A if SDO_AG is LOW
#define PRINT_CALCULATED

// select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel and buttons
#define B_RIGHT  0
#define B_UP     1
#define B_DOWN   2
#define B_LEFT   3
#define B_SELECT 4
#define B_NONE   5

#define Mode_Temp_Humid 1
#define Mode_Accelero 2
#define Mode_Gyro 3
#define Mode_Magneto 4
#define Mode_Barometer 5

#define Addr 0x5F

#define BMP_SCK 13
#define BMP_MISO 12
#define BMP_MOSI 11 
#define BMP_CS 10

Adafruit_BMP280 bme;

// read the buttons
int adc_key_in  = 0;
int read_LCD_buttons()
{
   adc_key_in = analogRead(0);      // read the value from the sensor 
   // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
   // we add approx 50 to those values and check to see if we are close
   if (adc_key_in > 1000) return B_NONE; // We make this the 1st option for speed reasons since it will be the most likely result
   // For V1.1 us this threshold
   if (adc_key_in < 50)   return B_RIGHT;  
   if (adc_key_in < 250)  return B_UP; 
   if (adc_key_in < 450)  return B_DOWN; 
   if (adc_key_in < 650)  return B_LEFT; 
   if (adc_key_in < 850)  return B_SELECT;  
  
   return B_NONE;  // when all others fail, return this...
}

int lcd_key     = 0;
void setup()
{
  lcd.begin(16, 2);              // start the library
  lcd.setCursor(0,0);
  lcd.print("Temp. & Humidity"); // print a simple message
  Serial.begin(9600);
  lcd.setBacklight(128);
  /*
  Wire.begin();     // Initialise I2C communication as MASTER 
  Wire.beginTransmission(Addr);     // Start I2C Transmission
  Wire.write(0x10); // Select average configuration register
  Wire.write(0x1B); // Temperature average samples = 256, Humidity average samples = 512
  Wire.endTransmission(); // Stop I2C Transmission
 
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  Wire.write(0x20); // Select control register1
  Wire.write(0x85); // Power ON, Continuous update, Data output rate = 1 Hz
  Wire.endTransmission(); // Stop I2C Transmission
  delay(300);
  */
  Wire.begin();
  smeHumidity.begin();
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  imu.begin();

  bme.begin();
}

int mode = Mode_Temp_Humid;
void Show_Mode()
{
    lcd.setCursor(0,0);  
    if (mode == Mode_Temp_Humid) lcd.print("Temp. & Humidity");
    else if (mode == Mode_Accelero) lcd.print("Accelerometer   ");
    else if (mode == Mode_Gyro) lcd.print("Gyroscope      ");
    else if (mode == Mode_Magneto) lcd.print("Magnetometer    ");
    else if (mode == Mode_Barometer) lcd.print("Barometer       ");
}


void Humidity()
{
  unsigned int data[2];
  unsigned int val[4];
  unsigned int H0, H1, H2, H3, T0, T1, T2, T3, raw;
 
  // Humidity calliberation values
  for(int i = 0; i < 2; i++)
  {
    // Start I2C Transmission
    Wire.beginTransmission(Addr);
    // Send data register
    Wire.write((48 + i));
    // Stop I2C Transmission
    Wire.endTransmission();
    
    // Request 1 byte of data
    Wire.requestFrom(Addr, 1);
    
    // Read 1 byte of data
    if(Wire.available() == 1)
    {
      data[i] = Wire.read();
    }
  }
  
  // Convert Humidity data
  H0 = data[0] / 2;
  H1 = data[1] / 2;
  
  for(int i = 0; i < 2; i++)
  {
    // Start I2C Transmission
    Wire.beginTransmission(Addr);
    // Send data register
    Wire.write((54 + i));
    // Stop I2C Transmission
    Wire.endTransmission();
    
    // Request 1 byte of data
    Wire.requestFrom(Addr,1);
    
    // Read 1 byte of data
    if(Wire.available() == 1)
    {
      data[i] = Wire.read();
    }
  }
  // Convert Humidity data
  H2 = (data[1] * 256.0) + data[0];
  
  for(int i = 0; i < 2; i++)
  {
    // Start I2C Transmission
    Wire.beginTransmission(Addr);
    // Send data register
    Wire.write((58 + i));
    // Stop I2C Transmission
    Wire.endTransmission();
    
    // Request 1 byte of data
    Wire.requestFrom(Addr,1);
    
    // Read 1 byte of data
    if(Wire.available() == 1)
    {
      data[i] = Wire.read();
    }
  }
  // Convert Humidity data
  H3 = (data[1] * 256.0) + data[0];
 
  // Temperature calliberation values
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  // Send data register
  Wire.write(0x32);
  // Stop I2C Transmission
  Wire.endTransmission();
 
  // Request 1 byte of data
  Wire.requestFrom(Addr,1);
 
  // Read 1 byte of data
  if(Wire.available() == 1)
  {
    T0 = Wire.read();
  }
 
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  // Send data register
  Wire.write(0x33);
  // Stop I2C Transmission
  Wire.endTransmission();
 
  // Request 1 byte of data
  Wire.requestFrom(Addr,1);
 
  // Read 1 byte of data
  if(Wire.available() == 1)
  {
    T1 = Wire.read();
  }
  
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  // Send data register
  Wire.write(0x35);
  // Stop I2C Transmission
  Wire.endTransmission();
  
  // Request 1 byte of data
  Wire.requestFrom(Addr, 1);
 
  // Read 1 byte of data
  if(Wire.available() == 1)
  {
    raw = Wire.read();
  }
 
  raw = raw & 0x0F;
  
  // Convert the temperature calliberation values to 10-bits
  T0 = ((raw & 0x03) * 256) + T0;
  T1 = ((raw & 0x0C) * 64) + T1;
 
  for(int i = 0; i < 2; i++)
  {
    // Start I2C Transmission
    Wire.beginTransmission(Addr);
    // Send data register
    Wire.write((60 + i));
    // Stop I2C Transmission
    Wire.endTransmission();
    
    // Request 1 byte of data
    Wire.requestFrom(Addr,1);
    
    // Read 1 byte of data
    if(Wire.available() == 1)
    {
      data[i] = Wire.read();
    }
  }
  // Convert the data
  T2 = (data[1] * 256.0) + data[0];
    
  for(int i = 0; i < 2; i++)
  {
    // Start I2C Transmission
    Wire.beginTransmission(Addr);
    // Send data register
    Wire.write((62 + i));
    // Stop I2C Transmission
    Wire.endTransmission();
    
    // Request 1 byte of data
    Wire.requestFrom(Addr,1);
    
    // Read 1 byte of data
    if(Wire.available() == 1)
    {
      data[i] = Wire.read();
    }
  }
  // Convert the data
  T3 = (data[1] * 256.0) + data[0];
  
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  // Send data register
  Wire.write(0x28 | 0x80);
  // Stop I2C Transmission
  Wire.endTransmission();
  
  // Request 4 bytes of data
  Wire.requestFrom(Addr,4);
  
  // Read 4 bytes of data
  // humidity msb, humidity lsb, temp msb, temp lsb
  if(Wire.available() == 4)
  {
    val[0] = Wire.read();
    val[1] = Wire.read();
    val[2] = Wire.read();
    val[3] = Wire.read();
  }
  
  // Convert the data
  float humidity = (val[1] * 256.0) + val[0];
  humidity = ((1.0 * H1) - (1.0 * H0)) * (1.0 * humidity - 1.0 * H2) / (1.0 * H3 - 1.0 * H2) + (1.0 * H0);
  int temp = (val[3] * 256) + val[2];
  float cTemp = (((T1 - T0) / 8.0) * (temp - T2)) / (T3 - T2) + (T0 / 8.0);
  float fTemp = (cTemp * 1.8 ) + 32;
  
  // Output data to LCD
  lcd.setCursor(0,1);
  lcd.print(humidity);
  lcd.print("%RH ");
  lcd.print("T: ");
  lcd.print(cTemp);
  lcd.print(" C");
  //lcd.print("Temp(F): ");
  //lcd.print(fTemp);
  //lcd.print(" F");
  delay(500); 
}

void printTemp()
{
    lcd.setCursor(0,1);
    lcd.print(smeHumidity.readHumidity());
    lcd.print("%RH ");
    lcd.print("T: ");
    lcd.print(smeHumidity.readTemperature());
    lcd.print(" C");
    delay(500); 
}

void printAccel()
{
  lcd.setCursor(0,1);
  imu.readAccel();
  lcd.print(imu.calcAccel(imu.ax));
  lcd.print(",");
  lcd.print(imu.calcAccel(imu.ay));
  lcd.print(",");
  lcd.print(imu.calcAccel(imu.az));
  lcd.print("g");
  delay(500);
}

void printGyro()
{
  lcd.setCursor(0,1);
  imu.readGyro();
  lcd.print(imu.calcGyro(imu.gx));
  lcd.print(",");
  lcd.print(imu.calcGyro(imu.gy));
  lcd.print(",");
  lcd.print(imu.calcGyro(imu.gz));
  lcd.print(" deg/s");
  delay(500);
}

void printMag()
{
  lcd.setCursor(0,1);
  imu.readMag();

  lcd.print(imu.calcMag(imu.mx));
  lcd.print(",");
  lcd.print(imu.calcMag(imu.my));
  lcd.print(",");
  lcd.print(imu.calcMag(imu.mz));
  lcd.print(" g");
  delay(500);
}

void printBaro() {
    lcd.setCursor(0,1);  
    //lcd.print("T="));
    //lcd.print(bme.readTemperature());
    
    lcd.print("P=");
    lcd.print(bme.readPressure());

    lcd.print("A=");
    lcd.print(bme.readAltitude(1013.25)); // this should be adjusted to your local forcase
    lcd.print(" m");
    
    delay(500);
}

void loop()
{
 //lcd.setCursor(0,1);            // move to the begining of the second line
 lcd_key = read_LCD_buttons();  // read the buttons
 Serial.println(lcd_key);

 switch (lcd_key)               // depending on which button was pushed, we perform an action
 {
     case B_DOWN:
     case B_RIGHT: 
     {
        mode++; 
        if (mode >= 6) mode = Mode_Temp_Humid;
        Show_Mode();
        delay(200);
        break;
     }
     case B_UP:
     case B_LEFT:
     {
        mode--; 
        if (mode == 0) mode = Mode_Barometer;
        Show_Mode();
        delay(200);      
        break;
     }
     case B_SELECT:
     case B_NONE:
     { 
       break;
     }
  }
  if (mode==Mode_Temp_Humid) printTemp();//Humidity();
  if (mode==Mode_Accelero) printAccel();
  if (mode == Mode_Gyro) printGyro();
  if (mode == Mode_Magneto) printMag();  
  if (mode == Mode_Barometer) printBaro();
}
